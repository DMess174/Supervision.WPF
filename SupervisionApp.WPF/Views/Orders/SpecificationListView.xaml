<UserControl
    x:Class="SupervisionApp.WPF.Views.Orders.SpecificationListView"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:local="clr-namespace:SupervisionApp.WPF.Views.Orders"
    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:validations="clr-namespace:SupervisionApp.WPF.Validations"
    d:DesignHeight="450"
    d:DesignWidth="800"
    mc:Ignorable="d">
    <DataGrid
        AutoGenerateColumns="False"
        CanUserAddRows="False"
        HeadersVisibility="All"
        ItemsSource="{Binding Specifications}">
        <DataGrid.Columns>
            <DataGridTextColumn
                Binding="{Binding Index}"
                EditingElementStyle="{StaticResource MaterialDesignDataGridTextColumnEditingStyle}"
                ElementStyle="{StaticResource MaterialDesignDataGridTextColumnStyle}"
                Header="№ п/п" />
            <DataGridTextColumn
                Binding="{Binding Number}"
                EditingElementStyle="{StaticResource MaterialDesignDataGridTextColumnEditingStyle}"
                ElementStyle="{StaticResource MaterialDesignDataGridTextColumnStyle}"
                Header="Номер" />
            <!--  if you want to use the pop up style (MaterialDesignDataGridTextColumnPopupEditingStyle), you must use MaterialDataGridTextColumn  -->
            <materialDesign:DataGridTextColumn
                EditingElementStyle="{StaticResource MaterialDesignDataGridTextColumnPopupEditingStyle}"
                ElementStyle="{StaticResource MaterialDesignDataGridTextColumnStyle}"
                Header="Name">
                <materialDesign:DataGridTextColumn.Binding>
                    <Binding Path="Name">
                        <Binding.ValidationRules>
                            <validations:NotEmptyValidation />
                        </Binding.ValidationRules>
                    </Binding>
                </materialDesign:DataGridTextColumn.Binding>
            </materialDesign:DataGridTextColumn>
            <!--  set a max length to get an indicator in the editor  -->
            <DataGridTextColumn
                EditingElementStyle="{StaticResource MaterialDesignDataGridTextColumnEditingStyle}"
                ElementStyle="{StaticResource MaterialDesignDataGridTextColumnStyle}"
                Header="Description">
                <DataGridTextColumn.Binding>
                    <Binding Path="Description">
                        <Binding.ValidationRules>
                            <validations:NotEmptyValidation />
                        </Binding.ValidationRules>
                    </Binding>
                </DataGridTextColumn.Binding>
            </DataGridTextColumn>
            <materialDesign:DataGridTextColumn
                Width="120"
                Binding="{Binding Numeric}"
                EditingElementStyle="{StaticResource MaterialDesignDataGridTextColumnPopupEditingStyle}"
                Header="Number with long header">
                <DataGridTextColumn.HeaderStyle>
                    <Style BasedOn="{StaticResource MaterialDesignDataGridColumnHeader}" TargetType="{x:Type DataGridColumnHeader}">
                        <Setter Property="HorizontalContentAlignment" Value="Right" />
                        <Setter Property="ContentTemplate">
                            <Setter.Value>
                                <DataTemplate>
                                    <TextBlock
                                        Text="{Binding}"
                                        TextAlignment="Right"
                                        TextWrapping="Wrap" />
                                </DataTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </DataGridTextColumn.HeaderStyle>
                <DataGridTextColumn.ElementStyle>
                    <Style BasedOn="{StaticResource MaterialDesignDataGridTextColumnStyle}" TargetType="{x:Type TextBlock}">
                        <Setter Property="HorizontalAlignment" Value="Right" />
                    </Style>
                </DataGridTextColumn.ElementStyle>
            </materialDesign:DataGridTextColumn>

            <!--  use custom combo box column to get better combos. Use ItemsSourceBinding as your binding template to be applied to each combo  -->
            <materialDesign:DataGridComboBoxColumn
                Width="100"
                Header="Food with long header"
                IsEditable="True"
                ItemsSourceBinding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type DataGrid}}, Path=DataContext.Foods}"
                SelectedValueBinding="{Binding Food}">
                <!--Setting the editing element style allows access to all of the combo box's properties
                            <materialDesign:MaterialDataGridComboBoxColumn.EditingElementStyle>
                                <Style TargetType="ComboBox" BasedOn="{StaticResource {ComponentResourceKey TypeInTargetAssembly={x:Type ComboBox}, ResourceId=MaterialDataGridComboBoxColumnEditingStyle}}" >
                                    <Setter Property="IsEditable" Value="True" />
                                </Style>
                            </materialDesign:MaterialDataGridComboBoxColumn.EditingElementStyle>
                -->
            </materialDesign:DataGridComboBoxColumn>
        </DataGrid.Columns>
    </DataGrid>
</UserControl>
